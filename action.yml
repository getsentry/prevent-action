---
# yamllint disable rule:line-length
name: "Sentry Prevent"
description: "GitHub Action that uploads coverage and test result reports for your repository to Sentry Prevent"
author: "Sentry"
inputs:
  commit_parent:
    description: "SHA (with 40 chars) of what should be the parent of this commit."
    required: false
  directory:
    description: "Folder to search for coverage files. Default to the current working directory"
    required: false
  disable_file_fixes:
    description: "Disable file fixes to ignore common lines from coverage (e.g. blank lines or empty brackets). Read more here https://docs.codecov.com/docs/fixing-reports" # TODO: update this link
    required: false
    default: "false"
  disable_search:
    description: "Disable search for coverage files. This is helpful when specifying what files you want to upload with the files option."
    required: false
    default: "false"
  disable_safe_directory:
    description: "Disable setting safe directory. Set to true to disable."
    required: false
    default: "false"
  disable_telem:
    description: "Disable sending telemetry data to Sentry Prevent. Set to true to disable."
    required: false
    default: "false"
  dry_run:
    description: "Don't upload files to Sentry Prevent"
    required: false
    default: "false"
  env_vars:
    description: "Environment variables to tag the upload with (e.g. PYTHON | OS,PYTHON)"
    required: false
  exclude:
    description: "Comma-separated list of folders to exclude from search."
    required: false
  fail_ci_if_error:
    description: "On error, exit with non-zero code"
    required: false
    default: "true"
  files:
    description: "Comma-separated list of explicit files to upload. These will be added to the coverage files found for upload. If you wish to only upload the specified files, please consider using disable-search to disable uploading other files."
    required: false
  flags:
    description: "(Not implemented) Comma-separated list of flags to upload to group coverage metrics."
    required: false
  git_service:
    description: "Override the git_service (e.g. github_enterprise)"
    required: false
    default: "github"
  installer_source:
    description: "Select which installer to use. Choices are `binary` and `pypi`, defaults to `pypi`"
    required: false
    default: "pypi"
  name:
    description: "Custom defined name of the upload. Visible in the Prevent UI"
    required: false
  network_filter:
    description: "Specify a filter on the files listed in the network section of the Prevent report. This will only add files whose path begin with the specified filter. Useful for upload-specific path fixing."
    required: false
  network_prefix:
    description: "Specify a prefix on files listed in the network section of the Prevent report. Useful to help resolve path fixing."
    required: false
  os:
    description: "Override the assumed OS. Options available at cli.codecov.io" # TODO: update this link
    required: false
  override_branch:
    description: "Specify the branch to be displayed with this commit on Prevent"
    required: false
  override_build:
    description: "Specify the build number manually"
    required: false
  override_build_url:
    description: "The URL of the build where this is running"
    required: false
  override_commit:
    description: "Commit SHA (with 40 chars)"
    required: false
  override_pr:
    description: "Specify the pull request number manually. Used to override pre-existing CI environment variables."
    required: false
  recurse_submodules:
    description: "Whether to enumerate files inside of submodules for path-fixing purposes. Off by default."
    default: "false"
  root_dir:
    description: "Root folder from which to consider paths on the network section. Defaults to current working directory."
    required: false
  token:
    description: "Repository Sentry Prevent token. Used to authorize report uploads"
    required: false
  use_oidc:
    description: "Use OIDC instead of token. This will ignore any token supplied"
    required: false
    default: "false"
  verbose:
    description: "Enable verbose logging"
    required: false
    default: "false"
  version:
    description: "Which version of the Sentry Prevent CLI to use (defaults to 'latest')"
    required: false
    default: "latest"
  working-directory:
    description: "Directory in which to execute prevent.sh"
    required: false

branding:
  color: "red"
  icon: "umbrella"

runs:
  using: "composite"
  steps:
    - name: Initialize action
      shell: bash
      run: |
        # Initialize action
        SP_SAY() {
          echo -e "$1"
        }
        SP_B="\033[0;36m"  # variables/constants
        SP_G="\033[0;32m"  # info/debug
        SP_R="\033[0;31m"  # errors
        SP_X="\033[0m"

        SP_ACTION_VERSION=$(cat ${GITHUB_ACTION_PATH}/src/version)
        SP_SAY "
          _____
         |  __ \\                        _
         | |__) |__ _____   _____ _ __ | |_
         |  _  /.__/ _ \\ \\ / / _ \\ '_ \\| __|
         | |  | | \\  __/\\ V /  __/ | | | |_
         |_|  |_|  \\___| \\_/ \\___|_| |_|\\__|
                                   $SP_R Sentry Prevent$SP_X"

        SP_SAY "${SP_G}==>${SP_X} Running Action version ${SP_ACTION_VERSION}"
        echo "SP_B=\\033[0;36m" >> "$GITHUB_ENV"
        echo "SP_G=\\033[0;32m" >> "$GITHUB_ENV"
        echo "SP_R=\\033[0;31m" >> "$GITHUB_ENV"
        echo "SP_X=\\033[0m" >> "$GITHUB_ENV"
        echo "SP_RETRY=--retry 5 --retry-delay 2" >> "$GITHUB_ENV"
        echo "SP_VERSION=${SP_VERSION}" >> "$GITHUB_ENV"
      env:
        SP_FAIL_ON_ERROR: ${{ inputs.fail_ci_if_error }}
        SP_VERSION: ${{ inputs.version }}

    - name: Check for dependencies
      shell: bash
      run: |
        # Check for dependencies
        SP_SAY() {
          echo -e "$1"
        }
        if ! command -v git >/dev/null 2>&1; then
          SP_SAY "$SP_R==>Action needs git to run$SP_X";
          exit 1;
        elif ! command -v curl >/dev/null 2>&1; then
          SP_SAY "$SP_R==>Action needs git to curl$SP_X";
          exit 1;
        fi

        if [ "$SP_INSTALLER_SOURCE" != "pypi" ] && [ "$SP_INSTALLER_SOURCE" != "binary" ];
        then
          SP_SAY "$SP_R==>Invalid installer source $SP_INSTALLER_SOURCE given. Must be `pypi` or `binary`$SP_X";
          exit 1;
        fi
      env:
        SP_INSTALLER_SOURCE: ${{ inputs.installer_source }}

    - name: Set safe directory
      if: ${{ inputs.disable_safe_directory != 'true' }}
      shell: bash
      run: |
        # Set safe directory
        git config --global --add safe.directory "$WORKSPACE"
        git config --global --add safe.directory "$GITHUB_WORKSPACE"
      env:
        WORKSPACE: "{{ github.workspace }}"

    - name: Check if running for a fork
      shell: bash
      run: |
        # Check if running for a fork
        SP_FORK="false"
        if [ -n "$GITHUB_EVENT_PULL_REQUEST_HEAD_REPO_FULL_NAME" ] && [ "$GITHUB_EVENT_PULL_REQUEST_HEAD_REPO_FULL_NAME" != "$GITHUB_REPOSITORY" ];
        then
          echo -e "\033[0;32m==>\033[0m Fork detected"
          SP_FORK="true"
        fi
        echo "SP_FORK=$SP_FORK" >> "$GITHUB_ENV"
      env:
        GITHUB_EVENT_PULL_REQUEST_HEAD_LABEL: ${{ github.event.pull_request.head.label }}
        GITHUB_EVENT_PULL_REQUEST_HEAD_REPO_FULL_NAME: ${{ github.event.pull_request.head.repo.full_name }}
        GITHUB_REPOSITORY: ${{ github.repository }}

    - name: Get OIDC token
      if: ${{ inputs.use_oidc == 'true' }}
      uses: actions/github-script@v7
      id: oidc
      with:
        script: |
          # Get OIDC token
          const id_token = await core.getIDToken(process.env.SP_OIDC_AUDIENCE)
          return id_token
      env:
        SP_OIDC_AUDIENCE: ${{ inputs.url || 'https://codecov.io' }}

    - name: Get and set token
      shell: bash
      run: |
        # Get and set token
        if [ "$INPUTS_USE_OIDC" == 'true' ] && [ "$SP_FORK" != 'true' ];
        then
          echo "SP_TOKEN=$SP_OIDC_TOKEN" >> "$GITHUB_ENV"
        elif [ -n "${{ env.PREVENT_TOKEN }}" ];
        then
          echo -e "\033[0;32m==>\033[0m Token set from env"
            echo "SP_TOKEN=${{ env.PREVENT_TOKEN }}" >> "$GITHUB_ENV"
        else
          if [ -n "$INPUTS_TOKEN" ];
          then
            echo -e "\033[0;32m==>\033[0m Token set from input"
            SP_TOKEN=$(echo "$INPUTS_TOKEN" | tr -d '\n')
            echo "SP_TOKEN=$SP_TOKEN" >> "$GITHUB_ENV"
          fi
        fi
      env:
        SP_OIDC_TOKEN: ${{ steps.oidc.outputs.result }}
        SP_OIDC_AUDIENCE: ${{ inputs.url || 'https://codecov.io' }}
        INPUTS_TOKEN: ${{ inputs.token }}
        INPUTS_USE_OIDC: ${{ inputs.use_oidc }}

    - name: Override branch for forks
      shell: bash
      run: |
        # Override branch for forks
        if [ -z "$SP_BRANCH" ] && [ -z "$SP_TOKEN" ] && [ "$SP_FORK" == 'true' ]
        then
          echo -e "\033[0;32m==>\033[0m Fork detected, setting branch to $GITHUB_EVENT_PULL_REQUEST_HEAD_LABEL"
          TOKENLESS="$GITHUB_EVENT_PULL_REQUEST_HEAD_LABEL"
          SP_BRANCH="$GITHUB_EVENT_PULL_REQUEST_HEAD_LABEL"
          echo "TOKENLESS=$TOKENLESS" >> "$GITHUB_ENV"
        fi

        echo "SP_BRANCH=$SP_BRANCH" >> "$GITHUB_ENV"
      env:
        SP_BRANCH: ${{ inputs.override_branch }}
        GITHUB_EVENT_PULL_REQUEST_HEAD_LABEL: ${{ github.event.pull_request.head.label }}
        GITHUB_EVENT_PULL_REQUEST_HEAD_REPO_FULL_NAME: ${{ github.event.pull_request.head.repo.full_name }}
        GITHUB_REPOSITORY: ${{ github.repository }}

    - name: Override commits and pr for pull requests
      shell: bash
      run: |
        # Override commits and pr for pull requests
        if [ -z "$SP_SHA" ];
        then
          SP_SHA="$GITHUB_EVENT_PULL_REQUEST_HEAD_SHA"
        fi
        if [ -z "$SP_PR" ] && [ "$SP_FORK" == 'true' ];
        then
          SP_PR="$GITHUB_EVENT_NUMBER"
        fi

        echo "SP_SHA=$SP_SHA" >> "$GITHUB_ENV"
        echo "SP_PR=$SP_PR" >> "$GITHUB_ENV"
      env:
        SP_PR: ${{ inputs.override_pr }}
        SP_SHA: ${{ inputs.override_commit }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_EVENT_NUMBER: ${{ github.event.number }}
        GITHUB_EVENT_PULL_REQUEST_HEAD_SHA: ${{ github.event.pull_request.head.sha }}

    - name: Download Sentry Prevent CLI from pypi
      if: ${{ inputs.installer_source == 'pypi' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Download Sentry Prevent CLI from pypi
        SP_SAY() {
          echo -e "$1"
        }
        VERSION="sentry-prevent-cli"
        if [ "$SP_VERSION" != 'latest' ]; then
          VERSION+="==${SP_VERSION}"
        fi
        SP_SAY "$SP_B Installing $VERSION from pypi$SP_X"
        if ! pip install $VERSION; then
          SP_SAY "$SP_R==> Could not install via pypi.$SP_X"
          if [ "$SP_FAIL_ON_ERROR" = true ];
          then
             SP_SAY "$SP_R    Exiting...$SP_X"
             exit 1;
          fi
          exit
        fi
        echo "SP_COMMAND=sentry-prevent-cli" >> "$GITHUB_ENV"

    - name: Download Sentry Prevent CLI from binary
      if: ${{ inputs.installer_source == 'binary' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Download Sentry Prevent CLI from binary
        SP_SAY() {
          echo -e "$1"
        }
        if [ -n "$SP_OS" ];
        then
          SP_SAY "$g==>$x Overridden OS: $b${SP_OS}$x"
        else
          SP_OS="windows"
          family=$(uname -s | tr '[:upper:]' '[:lower:]')
          [[ $family == "darwin" ]] && SP_OS="macos"
          [[ $family == "linux" ]] && SP_OS="linux"
          [[ $SP_OS == "linux" ]] && \
            osID=$(grep -e "^ID=" /etc/os-release | cut -c4-)
          [[ $osID == "alpine" ]] && SP_OS="alpine"
          [[ $(arch) == "x86_64" && $SP_OS == "alpine" ]] && SP_OS+="_x86_64"
          [[ $(arch) == "aarch64" && $family == "linux" ]] && SP_OS+="_arm64"
          SP_SAY "$g==>$x Detected $b${SP_OS}$x"
        fi
        echo "SP_OS=$SP_OS" >> "$GITHUB_ENV"

        SP_FILENAME="sentry-prevent-cli_${SP_OS}"
        [[ $SP_OS == "windows" ]] && SP_FILENAME+=".exe"
        SP_COMMAND="./$SP_FILENAME"

        SP_URL="https://github.com/getsentry/prevent-cli/releases/${SP_VERSION}/download/${SP_FILENAME}"
        SP_SAY "$g ->$x Downloading binary from $b${SP_URL}$x"
        curl -LOs $retry "$SP_URL"
        SP_SAY "$g==>$x Finishing downloading $b${SP_OS}:${SP_VERSION}$x"

        echo "SP_COMMAND=$SP_COMMAND" >> "$GITHUB_ENV"
      env:
        SP_OS: ${{ inputs.os }}

    - name: Run the CLI
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Run the CLI
        SP_SAY() {
          echo -e "$1"
        }
        SP_LOWER() {
          echo $(echo $1 | sed 's/SP//' | sed 's/_/-/g' | tr '[:upper:]' '[:lower:]')
        }

        SP_K_ARG() {
          if [ -n "$(eval echo \$"SP_$1")" ];
          then
            echo "--$(SP_LOWER "$1")"
          fi
        }

        SP_V_ARG() {
          if [ -n "$(eval echo \$"SP_$1")" ];
          then
            echo "$(eval echo \$"SP_$1")"
          fi
        }

        SP_WRITE_BOOL_ARGS() {
          if [ "$(eval echo \$$1)" = "true" ] || [ "$(eval echo \$$1)" = "1" ];
          then
            echo "-$(SP_LOWER $1)"
          fi
        }

        SP_CLI_ARGS=()
        SP_CLI_ARGS+=( $(SP_WRITE_BOOL_ARGS SP_DISABLE_TELEM) )
        SP_CLI_ARGS+=( $(SP_WRITE_BOOL_ARGS SP_VERBOSE) )

        OLDIFS=$IFS;IFS=,
        SP_CMD_ARGS=()
        SP_CMD_ARGS+=( "--report-type" "test_results" )
        SP_CMD_ARGS+=( $(SP_K_ARG BUILD) $(SP_V_ARG BUILD))
        SP_CMD_ARGS+=( $(SP_K_ARG BUILD_URL) $(SP_V_ARG BUILD_URL))
        SP_CMD_ARGS+=( $(SP_K_ARG DIR) $(SP_V_ARG DIR))
        SP_CMD_ARGS+=( $(SP_WRITE_BOOL_ARGS SP_DISABLE_FILE_FIXES) )
        SP_CMD_ARGS+=( $(SP_WRITE_BOOL_ARGS SP_DISABLE_SEARCH) )
        SP_CMD_ARGS+=( $(SP_WRITE_BOOL_ARGS SP_DRY_RUN) )
        SP_CMD_ARGS+=( $(SP_WRITE_BOOL_ARGS SP_ENV) )
        if [ -n "$SP_EXCLUDES" ];
        then
          for directory in $SP_EXCLUDES; do
            SP_CMD_ARGS+=( "--exclude" "$directory" )
          done
        fi
        SP_CMD_ARGS+=( $(SP_WRITE_BOOL_ARGS SP_FAIL_ON_ERROR) )
        if [ -n "$SP_FILES" ];
        then
          for file in $SP_FILES; do
            SP_CMD_ARGS+=( "--file" "$file" )
          done
        fi
        SP_CMD_ARGS+=( $(SP_K_ARG DIR) $(SP_V_ARG GIT_SERVICE))
        if [ -n "$SP_NAME" ];
        then
          SP_CMD_ARGS+=( "--name" "$SP_NAME" )
        fi
        SP_CMD_ARGS+=( $(SP_K_ARG NETWORK_FILTER) $(SP_V_ARG NETWORK_FILTER))
        SP_CMD_ARGS+=( $(SP_K_ARG NETWORK_PREFIX) $(SP_V_ARG NETWORK_PREFIX))
        SP_CMD_ARGS+=( $(SP_K_ARG NETWORK_ROOT_FOLDER) $(SP_V_ARG NETWORK_ROOT_FOLDER))
        SP_CMD_ARGS+=( $(SP_K_ARG PARENT_SHA) $(SP_V_ARG PARENT_SHA))
        SP_CMD_ARGS+=( $(SP_WRITE_BOOL_ARGS SP_RECURSE_SUBMODULES) )

        IFS=$OLDIFS

        # github.com/codecov/uploader/issues/475
        unset NODE_OPTIONS
        token="$(eval echo $SP_TOKEN)"
        SP_SAY "$g ->$x Token length: ${#token}"
        token_str=""
        token_arg=()

        if [ -n "$token" ];
        then
          token_str+=" -t <redacted>"
          token_arg+=( " -t " "$token")
        fi

        SP_RUN_CMD="upload"
        SP_SAY "$g==>$x Running upload"
        SP_SAY "      $b$SP_COMMAND $(echo "${SP_CLI_ARGS[@]}") ${SP_RUN_CMD}$token_str $(echo "${SP_CMD_ARGS[@]}")$x"
        if ! $SP_COMMAND \
          ${SP_CLI_ARGS[*]} \
          ${SP_RUN_CMD} \
          ${token_arg[*]} \
          "${SP_CMD_ARGS[@]}";
        then
          SP_SAY "$SP_R==> Failed to run $SP_RUN_CMD $SP_X"
          if [ "$SP_FAIL_ON_ERROR" = true ];
          then
             say "$SP_R    Exiting...$SP_X"
             exit 1;
          fi
          exit
        fi
      env:
        SP_BUILD: ${{ inputs.override_build }}
        SP_BUILD_URL: ${{ inputs.override_build_url }}
        SP_DIR: ${{ inputs.directory }}
        SP_DISABLE_FILE_FIXES: ${{ inputs.disable_file_fixes }}
        SP_DISABLE_SEARCH: ${{ inputs.disable_search }}
        SP_DISABLE_TELEM: ${{ inputs.disable_telem }}
        SP_DRY_RUN: ${{ inputs.dry_run }}
        SP_ENV: ${{ inputs.env_vars }}
        SP_EXCLUDES: ${{ inputs.exclude }}
        SP_FAIL_ON_ERROR: ${{ inputs.fail_ci_if_error }}
        SP_FILES: ${{ inputs.files }}
        SP_GIT_SERVICE: ${{ inputs.git_service }}
        SP_NAME: ${{ inputs.name }}
        SP_NETWORK_FILTER: ${{ inputs.network_filter }}
        SP_NETWORK_PREFIX: ${{ inputs.network_prefix }}
        SP_NETWORK_ROOT_FOLDER: ${{ inputs.root_dir }}
        SP_PARENT_SHA: ${{ inputs.commit_parent }}
        SP_RECURSE_SUBMODULES: ${{ inputs.recurse_submodules }}
        SP_VERBOSE: ${{ inputs.verbose }}
